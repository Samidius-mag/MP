const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function setupEnv() {
  console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è SMTP\n');
  
  const envPath = path.join(__dirname, '.env');
  const examplePath = path.join(__dirname, 'env.example');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ .env —Ñ–∞–π–ª
  if (fs.existsSync(envPath)) {
    const overwrite = await question('–§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ');
    if (overwrite.toLowerCase() !== 'y') {
      console.log('‚ùå –û—Ç–º–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
      rl.close();
      return;
    }
  }
  
  console.log('üìß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMTP –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email\n');
  
  // –ß–∏—Ç–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞
  let envContent = fs.readFileSync(examplePath, 'utf8');
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SMTP
  console.log('–í—ã–±–µ—Ä–∏—Ç–µ SMTP –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:');
  console.log('1. Gmail (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)');
  console.log('2. Yandex (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)');
  console.log('3. –î—Ä—É–≥–æ–π (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä—É—á–Ω—É—é)');
  
  const provider = await question('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3): ');
  
  let smtpHost, smtpPort, smtpUser, smtpPass, smtpFrom;
  
  switch (provider) {
    case '1':
      smtpHost = 'smtp.gmail.com';
      smtpPort = '587';
      smtpUser = await question('Gmail email: ');
      smtpPass = await question('–ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (16 —Å–∏–º–≤–æ–ª–æ–≤): ');
      smtpFrom = await question('–û—Ç –∫–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: noreply@yourcompany.com): ');
      break;
      
    case '2':
      smtpHost = 'smtp.yandex.ru';
      smtpPort = '587';
      smtpUser = await question('Yandex email: ');
      smtpPass = await question('–ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ');
      smtpFrom = await question('–û—Ç –∫–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: noreply@yourcompany.com): ');
      break;
      
    case '3':
      smtpHost = await question('SMTP —Ö–æ—Å—Ç: ');
      smtpPort = await question('SMTP –ø–æ—Ä—Ç: ');
      smtpUser = await question('SMTP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ');
      smtpPass = await question('SMTP –ø–∞—Ä–æ–ª—å: ');
      smtpFrom = await question('–û—Ç –∫–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å: ');
      break;
      
    default:
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä');
      rl.close();
      return;
  }
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
  envContent = envContent.replace(/SMTP_HOST=.*/, `SMTP_HOST=${smtpHost}`);
  envContent = envContent.replace(/SMTP_PORT=.*/, `SMTP_PORT=${smtpPort}`);
  envContent = envContent.replace(/SMTP_USER=.*/, `SMTP_USER=${smtpUser}`);
  envContent = envContent.replace(/SMTP_PASS=.*/, `SMTP_PASS=${smtpPass}`);
  envContent = envContent.replace(/SMTP_FROM=.*/, `SMTP_FROM=${smtpFrom}`);
  
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º .env —Ñ–∞–π–ª
  fs.writeFileSync(envPath, envContent);
  
  console.log('\n‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: node test-smtp.js');
  console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm start');
  console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
  
  rl.close();
}

setupEnv().catch(console.error);
