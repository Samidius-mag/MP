const express = require('express');
const { body, validationResult, query } = require('express-validator');
const { pool } = require('../config/database');
const { requireClient } = require('../middleware/auth');
const DepositService = require('../services/depositService');
const axios = require('axios');

const router = express.Router();

// –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞
router.get('/balance', requireClient, async (req, res) => {
  try {
    const client = await pool.connect();
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞–ª–∞–Ω—Å –∏–∑ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
      const balanceResult = await client.query(
        `SELECT balance_after 
         FROM deposits 
         WHERE client_id = (SELECT id FROM clients WHERE user_id = $1)
         ORDER BY created_at DESC 
         LIMIT 1`,
        [req.user.id]
      );

      const currentBalance = balanceResult.rows.length > 0 
        ? parseFloat(balanceResult.rows[0].balance_after) 
        : 0;

      res.json({ balance: currentBalance });
    } finally {
      client.release();
    }
  } catch (err) {
    console.error('Balance error:', err);
    res.status(500).json({ error: 'Failed to get balance' });
  }
});

// –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º
router.get('/deposits', requireClient, [
  query('page').optional().isInt({ min: 1 }),
  query('limit').optional().isInt({ min: 1, max: 100 }),
  query('type').optional().isIn(['deposit', 'withdrawal', 'order_payment'])
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 20;
    const offset = (page - 1) * limit;
    const type = req.query.type;

    const client = await pool.connect();
    try {
      let whereClause = 'WHERE c.user_id = $1';
      let queryParams = [req.user.id];
      let paramIndex = 2;

      if (type) {
        whereClause += ` AND d.transaction_type = $${paramIndex}`;
        queryParams.push(type);
        paramIndex++;
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç—ã
      const depositsResult = await client.query(
        `SELECT d.*, c.company_name
         FROM deposits d
         JOIN clients c ON d.client_id = c.id
         ${whereClause}
         ORDER BY d.created_at DESC
         LIMIT $${paramIndex} OFFSET $${paramIndex + 1}`,
        [...queryParams, limit, offset]
      );

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const countResult = await client.query(
        `SELECT COUNT(*) as total
         FROM deposits d
         JOIN clients c ON d.client_id = c.id
         ${whereClause}`,
        queryParams
      );

      const total = parseInt(countResult.rows[0].total);
      const totalPages = Math.ceil(total / limit);

      res.json({
        deposits: depositsResult.rows,
        pagination: {
          page,
          limit,
          total,
          totalPages,
          hasNext: page < totalPages,
          hasPrev: page > 1
        }
      });
    } finally {
      client.release();
    }
  } catch (err) {
    console.error('Deposits history error:', err);
    res.status(500).json({ error: 'Failed to get deposits history' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∫–ª–∏–µ–Ω—Ç–∞
router.get('/orders', requireClient, [
  query('page').optional().isInt({ min: 1 }),
  query('limit').optional().isInt({ min: 1, max: 100 }),
  query('status').optional().isIn(['new', 'in_assembly', 'ready_to_ship', 'shipped', 'delivered', 'cancelled']),
  query('marketplace').optional().isIn(['wildberries', 'ozon', 'yandex_market']),
  query('search').optional().trim()
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 20;
    const offset = (page - 1) * limit;
    const { status, marketplace, search } = req.query;

    const client = await pool.connect();
    try {
      let whereClause = 'WHERE c.user_id = $1';
      let queryParams = [req.user.id];
      let paramIndex = 2;

      if (status) {
        whereClause += ` AND o.status = $${paramIndex}`;
        queryParams.push(status);
        paramIndex++;
        // –ó–∞—â–∏—Ç–∞ –æ—Ç "–∑–∞–≤–∏—Å—à–∏—Ö" –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: —Å–∫—Ä—ã–≤–∞–µ–º —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ new –∏–∑ —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–∏
        if (status === 'new') {
          whereClause += " AND o.created_at > NOW() - INTERVAL '1 day'";
        }
      }

      if (marketplace) {
        whereClause += ` AND o.marketplace = $${paramIndex}`;
        queryParams.push(marketplace);
        paramIndex++;
      }

      if (search) {
        whereClause += ` AND (o.customer_name ILIKE $${paramIndex} OR o.marketplace_order_id ILIKE $${paramIndex})`;
        queryParams.push(`%${search}%`);
        paramIndex++;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã
      const ordersResult = await client.query(
        `SELECT o.*, c.company_name
         FROM orders o
         JOIN clients c ON o.client_id = c.id
         ${whereClause}
         ORDER BY o.created_at DESC
         LIMIT $${paramIndex} OFFSET $${paramIndex + 1}`,
        [...queryParams, limit, offset]
      );

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ JSON –ø–æ–ª—è items (–æ–±–æ–≥–∞—â—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
      for (let order of ordersResult.rows) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å JSON –ø–æ–ª–µ items —Å –æ–±–æ–≥–∞—â—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (order.items && typeof order.items === 'object') {
          // items —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑ JSON –ø–æ–ª—è
          order.items = Array.isArray(order.items) ? order.items : [];
        } else {
          // Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã order_items
          const itemsResult = await client.query(
            'SELECT * FROM order_items WHERE order_id = $1 ORDER BY created_at',
            [order.id]
          );
          order.items = itemsResult.rows;
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const countResult = await client.query(
        `SELECT COUNT(*) as total
         FROM orders o
         JOIN clients c ON o.client_id = c.id
         ${whereClause}`,
        queryParams
      );

      const total = parseInt(countResult.rows[0].total);
      const totalPages = Math.ceil(total / limit);

      res.json({
        orders: ordersResult.rows,
        pagination: {
          page,
          limit,
          total,
          totalPages,
          hasNext: page < totalPages,
          hasPrev: page > 1
        }
      });
    } finally {
      client.release();
    }
  } catch (err) {
    console.error('Orders error:', err);
    res.status(500).json({ error: 'Failed to get orders' });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É
router.get('/orders/check/:orderNumber', requireClient, async (req, res) => {
  try {
    const { orderNumber } = req.params;
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞ ${orderNumber} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.user.id}`);

    const client = await pool.connect();
    try {
      // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–¥–ª—è WB —Å—Ç–∞—Ç—É—Å–æ–≤)
      const apiKeysResult = await client.query(
        'SELECT id, api_keys FROM clients WHERE user_id = $1',
        [req.user.id]
      );
      if (apiKeysResult.rows.length === 0) {
        console.log('‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', req.user.id);
        return res.status(404).json({ error: 'Client not found' });
      }
      const clientRow = apiKeysResult.rows[0];
      const apiKeys = clientRow.api_keys || {};
      console.log('üîë API –∫–ª—é—á–∏ –∫–ª–∏–µ–Ω—Ç–∞:', Object.keys(apiKeys));

      // –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ –Ω–æ–º–µ—Ä—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const orderResult = await client.query(
        `SELECT o.*, c.company_name
         FROM orders o
         JOIN clients c ON o.client_id = c.id
         WHERE o.marketplace_order_id = $1 AND c.user_id = $2`,
        [orderNumber, req.user.id]
      );

      if (orderResult.rows.length === 0) {
        console.log('‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î:', orderNumber);
        return res.status(404).json({ error: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      const order = orderResult.rows[0];
      console.log('‚úÖ –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω –≤ –ë–î:', {
        id: order.id,
        marketplace: order.marketplace,
        order_type: order.order_type,
        status: order.status
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
      const itemsResult = await client.query(
        'SELECT * FROM order_items WHERE order_id = $1 ORDER BY created_at',
        [order.id]
      );

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–∫–µ—Ä—ã –∑–∞–∫–∞–∑–∞
      const stickersResult = await client.query(
        'SELECT * FROM stickers WHERE order_id = $1 ORDER BY created_at',
        [order.id]
      );

      order.items = itemsResult.rows;
      order.stickers = stickersResult.rows;

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ WB: supplierStatus –∏ wbStatus —á–µ—Ä–µ–∑ API —Å—Ç–∞—Ç—É—Å–æ–≤
      if (order.marketplace === 'wildberries' && apiKeys.wildberries?.api_key) {
        console.log('üõí –ó–∞–∫–∞–∑ WB, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã...');
        try {
          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π order_type, –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ‚Äî FBS)
          const orderType = (order.order_type || 'FBS').toUpperCase();
          console.log('üìã –¢–∏–ø –∑–∞–∫–∞–∑–∞:', orderType);

          // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–±–æ—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å id
          console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å–±–æ—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è...');
          const assignments = await fetchWildberriesAssignmentsByType(apiKeys.wildberries.api_key, orderType);
          console.log('üì¶ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:', assignments?.length || 0);

          // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ id –∑–∞–¥–∞–Ω–∏—è –ø–æ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –∫–ª—é—á–∞–º (marketplace_order_id –º–æ–∂–µ—Ç –±—ã—Ç—å gNumber/srid)
          let assignmentId = undefined;
          const asMap = new Map();
          for (const it of assignments || []) {
            const id = it.id || it.orderId || it.orderID || it.uid || it.orderUid;
            const keys = [it.gNumber, it.srid].filter(Boolean).map(String);
            if (id && keys.length > 0) {
              for (const k of keys) asMap.set(k, String(id));
            }
          }
          const candidate = String(order.marketplace_order_id);
          assignmentId = asMap.get(candidate);
          console.log('üîó –ü–æ–∏—Å–∫ ID –∑–∞–¥–∞–Ω–∏—è –¥–ª—è:', candidate, '->', assignmentId || '–Ω–µ –Ω–∞–π–¥–µ–Ω');

          // –ï—Å–ª–∏ id –Ω–∞–π–¥–µ–Ω ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
          if (assignmentId) {
            console.log('üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è ID:', assignmentId);
            const statuses = await fetchWildberriesOrderStatusesByType(
              apiKeys.wildberries.api_key,
              [assignmentId],
              orderType
            );
            console.log('üìä –ü–æ–ª—É—á–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—ã:', statuses);
            if (Array.isArray(statuses) && statuses.length > 0) {
              const st = statuses[0];
              order.supplierStatus = st.supplierStatus || null;
              order.wbStatus = st.wbStatus || null;
              console.log('‚úÖ –°—Ç–∞—Ç—É—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã:', {
                supplierStatus: order.supplierStatus,
                wbStatus: order.wbStatus
              });
            }
          } else {
            console.log('‚ö†Ô∏è ID —Å–±–æ—Ä–æ—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—Ç–∞—Ç—É—Å—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã');
          }
        } catch (e) {
          console.error('‚ùå WB order check enrichment failed:', e.response?.data || e.message);
        }
      } else {
        console.log('‚ÑπÔ∏è –ó–∞–∫–∞–∑ –Ω–µ WB –∏–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤');
      }

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É:', {
        id: order.id,
        marketplace: order.marketplace,
        status: order.status,
        supplierStatus: order.supplierStatus,
        wbStatus: order.wbStatus
      });
      res.json(order);
    } finally {
      client.release();
    }
  } catch (err) {
    console.error('‚ùå Order check error:', err);
    res.status(500).json({ error: 'Failed to check order' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
router.get('/orders/:orderId', requireClient, async (req, res) => {
  try {
    const { orderId } = req.params;

    const client = await pool.connect();
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
      const orderResult = await client.query(
        `SELECT o.*, c.company_name
         FROM orders o
         JOIN clients c ON o.client_id = c.id
         WHERE o.id = $1 AND c.user_id = $2`,
        [orderId, req.user.id]
      );

      if (orderResult.rows.length === 0) {
        return res.status(404).json({ error: 'Order not found' });
      }

      const order = orderResult.rows[0];

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–∑–∞
      const itemsResult = await client.query(
        'SELECT * FROM order_items WHERE order_id = $1 ORDER BY created_at',
        [orderId]
      );

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–∫–µ—Ä—ã –∑–∞–∫–∞–∑–∞
      const stickersResult = await client.query(
        'SELECT * FROM stickers WHERE order_id = $1 ORDER BY created_at',
        [orderId]
      );

      order.items = itemsResult.rows;
      order.stickers = stickersResult.rows;

      res.json(order);
    } finally {
      client.release();
    }
  } catch (err) {
    console.error('Order details error:', err);
    res.status(500).json({ error: 'Failed to get order details' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
router.get('/api-keys', requireClient, async (req, res) => {
  try {
    console.log('Fetching API keys for user:', req.user.id);
    const client = await pool.connect();
    try {
      const result = await client.query(
        'SELECT api_keys FROM clients WHERE user_id = $1',
        [req.user.id]
      );

      if (result.rows.length === 0) {
        console.log('Client not found for user:', req.user.id);
        return res.status(404).json({ error: 'Client not found' });
      }

      const apiKeys = result.rows[0].api_keys || {};
      console.log('Raw api_keys from DB:', apiKeys);
      
      const response = { 
        apiKeys: {
          wildberries: apiKeys.wildberries || { api_key: '' },
          ozon: apiKeys.ozon || { api_key: '', client_id: '' },
          yandex_market: apiKeys.yandex_market || { api_key: '' },
          sima_land: apiKeys.sima_land || { token: '' }
        }
      };
      
      console.log('Response API keys:', response);
      res.json(response);
    } finally {
      client.release();
    }
  } catch (err) {
    console.error('API keys fetch error:', err);
    res.status(500).json({ error: 'Failed to fetch API keys' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/orders-history', requireClient, [
  query('page').optional().isInt({ min: 1 }),
  query('limit').optional().isInt({ min: 1, max: 100 }),
  query('marketplace').optional().isIn(['wildberries', 'ozon', 'yandex_market']),
  query('status').optional().isIn(['new', 'in_assembly', 'ready_to_ship', 'shipped', 'delivered', 'cancelled'])
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 20;
    const offset = (page - 1) * limit;
    const marketplace = req.query.marketplace;
    const status = req.query.status;

    const client = await pool.connect();
    try {
      let whereClause = 'WHERE c.user_id = $1';
      let queryParams = [req.user.id];
      let paramIndex = 2;

      if (marketplace) {
        whereClause += ` AND o.marketplace = $${paramIndex}`;
        queryParams.push(marketplace);
        paramIndex++;
      }

      if (status) {
        whereClause += ` AND o.status = $${paramIndex}`;
        queryParams.push(status);
        paramIndex++;
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã
      const ordersResult = await client.query(
        `SELECT o.*, c.company_name
         FROM orders o
         JOIN clients c ON o.client_id = c.id
         ${whereClause}
         ORDER BY o.created_at DESC
         LIMIT $${paramIndex} OFFSET $${paramIndex + 1}`,
        [...queryParams, limit, offset]
      );

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–∑ JSON –ø–æ–ª—è items (–æ–±–æ–≥–∞—â—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
      for (let order of ordersResult.rows) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å JSON –ø–æ–ª–µ items —Å –æ–±–æ–≥–∞—â—ë–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if (order.items && typeof order.items === 'object') {
          // items —É–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑ JSON –ø–æ–ª—è
          order.items = Array.isArray(order.items) ? order.items : [];
        } else {
          // Fallback: –ø–æ–ª—É—á–∞–µ–º –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã order_items
          const itemsResult = await client.query(
            'SELECT * FROM order_items WHERE order_id = $1 ORDER BY created_at',
            [order.id]
          );
          order.items = itemsResult.rows;
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      const countResult = await client.query(
        `SELECT COUNT(*) as total
         FROM orders o
         JOIN clients c ON o.client_id = c.id
         ${whereClause}`,
        queryParams
      );

      const total = parseInt(countResult.rows[0].total);
      const totalPages = Math.ceil(total / limit);

      res.json({
        orders: ordersResult.rows,
        pagination: {
          page,
          limit,
          total,
          totalPages,
          hasNext: page < totalPages,
          hasPrev: page > 1
        }
      });
    } finally {
      client.release();
    }
  } catch (err) {
    console.error('Orders history error:', err);
    res.status(500).json({ error: 'Failed to fetch orders history' });
  }
});

// –ò–º–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
router.post('/import-orders', requireClient, async (req, res) => {
  try {
    const client = await pool.connect();
    try {
      // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∫–ª–∏–µ–Ω—Ç–∞
      const clientResult = await client.query(
        'SELECT api_keys FROM clients WHERE user_id = $1',
        [req.user.id]
      );

      if (clientResult.rows.length === 0) {
        return res.status(404).json({ error: 'Client not found' });
      }

      const apiKeys = clientResult.rows[0].api_keys || {};
      let importedOrders = [];

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã —Å Wildberries
      if (apiKeys.wildberries?.api_key) {
        try {
          const wbOrders = await fetchWildberriesOrders(apiKeys.wildberries.api_key);
          importedOrders = [...importedOrders, ...wbOrders];
        } catch (error) {
          console.error('Wildberries import error:', error);
          
          // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ "token scope not allowed"
          if (error.response?.status === 401 && error.response?.data?.detail === 'token scope not allowed') {
            return res.status(401).json({ 
              error: 'Wildberries API token scope not allowed',
              details: 'Your API token does not have permissions for Marketplace API. Please create a new token with "Marketplace" category in your Wildberries seller panel.',
              solution: {
                steps: [
                  'Go to Wildberries seller panel',
                  'Navigate to Profile ‚Üí Integrations ‚Üí API',
                  'Create a NEW token with "Marketplace" category',
                  'Update the API key in system settings'
                ]
              }
            });
          }
        }
      }

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã —Å Ozon
      if (apiKeys.ozon?.api_key && apiKeys.ozon?.client_id) {
        try {
          const ozonOrders = await fetchOzonOrders(apiKeys.ozon.api_key, apiKeys.ozon.client_id);
          importedOrders = [...importedOrders, ...ozonOrders];
        } catch (error) {
          console.error('Ozon import error:', error);
        }
      }

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–∫–∞–∑—ã —Å –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
      if (apiKeys.yandex_market?.api_key) {
        try {
          const yandexOrders = await fetchYandexMarketOrders(apiKeys.yandex_market.api_key);
          importedOrders = [...importedOrders, ...yandexOrders];
        } catch (error) {
          console.error('Yandex Market import error:', error);
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      const clientIdResult = await client.query(
        'SELECT id FROM clients WHERE user_id = $1',
        [req.user.id]
      );
      const clientId = clientIdResult.rows[0].id;

      let savedOrders = 0;
      for (const order of importedOrders) {
        try {
          await client.query(
            `INSERT INTO orders (client_id, marketplace_order_id, marketplace, status, total_amount, customer_name, customer_phone, customer_email, delivery_address, items, created_at, order_type)
             VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
             ON CONFLICT (client_id, marketplace_order_id, marketplace) DO UPDATE SET
             status = EXCLUDED.status,
             total_amount = EXCLUDED.total_amount,
             customer_name = EXCLUDED.customer_name,
             customer_phone = EXCLUDED.customer_phone,
             customer_email = EXCLUDED.customer_email,
             delivery_address = EXCLUDED.delivery_address,
             items = EXCLUDED.items,
             order_type = EXCLUDED.order_type,
             updated_at = CURRENT_TIMESTAMP`,
            [
              clientId,
              order.orderId,
              order.marketplace,
              order.status,
              order.totalAmount,
              order.customerName,
              order.customerPhone,
              order.customerEmail,
              order.deliveryAddress,
              JSON.stringify(order.items),
              order.orderDate || new Date().toISOString(),
              order.orderType || 'FBS'
            ]
          );
          savedOrders++;
        } catch (error) {
          console.error('Error saving order:', error);
        }
      }

      res.json({
        success: true,
        message: `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${savedOrders} –∑–∞–∫–∞–∑–æ–≤`,
        imported: savedOrders,
        total: importedOrders.length
      });
    } finally {
      client.release();
    }
  } catch (err) {
    console.error('Import orders error:', err);
    res.status(500).json({ error: 'Failed to import orders' });
  }
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
router.put('/api-keys', requireClient, [
  body('wildberries').optional().isObject(),
  body('ozon').optional().isObject(),
  body('yandex_market').optional().isObject()
], async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

      const { wildberries, ozon, yandex_market, sima_land } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Wildberries API —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if (wildberries?.api_key) {
      try {
        console.log('Testing Wildberries API token...');
        const testResponse = await axios.get('https://common-api.wildberries.ru/api/v1/seller-info', {
          headers: { 'Authorization': wildberries.api_key }
        });
        console.log('‚úÖ Wildberries API token is valid');
      } catch (testError) {
        console.error('‚ùå Wildberries API token test failed:', testError.response?.data || testError.message);
        
        if (testError.response?.status === 401) {
          return res.status(400).json({ 
            error: 'Invalid Wildberries API token',
            details: 'The provided API token is invalid or expired. Please check your token in the Wildberries seller panel.',
            field: 'wildberries.api_key'
          });
        }
      }
    }

    const client = await pool.connect();
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ API –∫–ª—é—á–∏
      const currentKeysResult = await client.query(
        'SELECT api_keys FROM clients WHERE user_id = $1',
        [req.user.id]
      );

      let currentKeys = {};
      if (currentKeysResult.rows.length > 0) {
        currentKeys = currentKeysResult.rows[0].api_keys || {};
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º API –∫–ª—é—á–∏
      const updatedKeys = {
        ...currentKeys,
        ...(wildberries && { wildberries }),
        ...(ozon && { ozon }),
        ...(yandex_market && { yandex_market }),
        ...(sima_land && { sima_land })
      };

      await client.query(
        'UPDATE clients SET api_keys = $1, updated_at = CURRENT_TIMESTAMP WHERE user_id = $2',
        [JSON.stringify(updatedKeys), req.user.id]
      );

      res.json({ 
        message: 'API keys updated successfully',
        apiKeys: updatedKeys
      });
    } finally {
      client.release();
    }
  } catch (err) {
    console.error('API keys update error:', err);
    res.status(500).json({ error: 'Failed to update API keys' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
router.get('/stats', requireClient, async (req, res) => {
  try {
    const client = await pool.connect();
    try {
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
      const totalOrdersResult = await client.query(
        `SELECT COUNT(*) as total
         FROM orders o
         JOIN clients c ON o.client_id = c.id
         WHERE c.user_id = $1`,
        [req.user.id]
      );

      // –ó–∞–∫–∞–∑—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
      const ordersByStatusResult = await client.query(
        `SELECT status, COUNT(*) as count
         FROM orders o
         JOIN clients c ON o.client_id = c.id
         WHERE c.user_id = $1
         GROUP BY status`,
        [req.user.id]
      );

      // –ó–∞–∫–∞–∑—ã –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º
      const ordersByMarketplaceResult = await client.query(
        `SELECT marketplace, COUNT(*) as count
         FROM orders o
         JOIN clients c ON o.client_id = c.id
         WHERE c.user_id = $1
         GROUP BY marketplace`,
        [req.user.id]
      );

      // –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤ (–ø—Ä–∏–≤–æ–¥–∏–º –∏–∑ –∫–æ–ø–µ–µ–∫ –∫ —Ä—É–±–ª—è–º)
      const totalAmountResult = await client.query(
        `SELECT COALESCE(SUM(total_amount) / 100.0, 0) as total
         FROM orders o
         JOIN clients c ON o.client_id = c.id
         WHERE c.user_id = $1`,
        [req.user.id]
      );

      // –ó–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
      const recentOrdersResult = await client.query(
        `SELECT COUNT(*) as count
         FROM orders o
         JOIN clients c ON o.client_id = c.id
         WHERE c.user_id = $1 AND o.created_at >= date_trunc('day', NOW())`,
        [req.user.id]
      );

      res.json({
        totalOrders: parseInt(totalOrdersResult.rows[0].total),
        ordersByStatus: ordersByStatusResult.rows.reduce((acc, row) => {
          acc[row.status] = parseInt(row.count);
          return acc;
        }, {}),
        ordersByMarketplace: ordersByMarketplaceResult.rows.reduce((acc, row) => {
          acc[row.marketplace] = parseInt(row.count);
          return acc;
        }, {}),
        totalAmount: parseFloat(totalAmountResult.rows[0].total),
        recentOrders: parseInt(recentOrdersResult.rows[0].count)
      });
    } finally {
      client.release();
    }
  } catch (err) {
    console.error('Stats error:', err);
    res.status(500).json({ error: 'Failed to get statistics' });
  }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –Ω—É–∂–Ω–æ–≥–æ WB —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ —Ç–∏–ø—É –∑–∞–∫–∞–∑–∞
async function fetchWildberriesOrderStatusesByType(apiKey, orderIds, orderType) {
  if (!orderIds || orderIds.length === 0) return [];
  const uniqueIds = Array.from(new Set(orderIds));
  const base = 'https://marketplace-api.wildberries.ru/api/v3';
  let path = '/orders/status'; // FBS –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (orderType === 'DBW') path = '/dbw/orders/status';
  if (orderType === 'DBS') path = '/dbs/orders/status';

  try {
    console.log(`Fetching WB ${orderType} statuses for ${uniqueIds.length} ids`);
    const headers = {
      'Authorization': apiKey,
      'Content-Type': 'application/json'
    };

    // 1) –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
    try {
      const resp = await axios.post(`${base}${path}`, { orders: uniqueIds.map(String) }, { headers });
      return resp.data?.orders || [];
    } catch (e1) {
      const body = e1.response?.data;
      if (!body || body.code !== 'IncorrectRequestBody') throw e1;
      // 2) –ø–æ–ø—ã—Ç–∫–∞: –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª (–µ—Å–ª–∏ ids —á–∏—Å–ª–æ–≤—ã–µ)
      const numericIds = uniqueIds.map(id => {
        const n = Number(id);
        return Number.isFinite(n) ? n : id; // –æ—Å—Ç–∞–≤–∏–º —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ
      });
      try {
        const resp2 = await axios.post(`${base}${path}`, { orders: numericIds }, { headers });
        return resp2.data?.orders || [];
      } catch (e2) {
        const body2 = e2.response?.data;
        if (!body2 || body2.code !== 'IncorrectRequestBody') throw e2;
        // 3) –ø–æ–ø—ã—Ç–∫–∞: –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ { id }
        const resp3 = await axios.post(`${base}${path}`, { orders: uniqueIds.map(id => ({ id })) }, { headers });
        return resp3.data?.orders || [];
      }
    }
  } catch (err) {
    console.error(`Wildberries ${orderType} statuses API error:`, err.response?.data || err.message);
    return [];
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–±–æ—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π (assignments) –ø–æ —Ç–∏–ø—É: FBS/DBW/DBS
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤, —Å—Ç–∞—Ä–∞—è—Å—å –≤–∫–ª—é—á–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
async function fetchWildberriesAssignmentsByType(apiKey, orderType) {
  const base = 'https://marketplace-api.wildberries.ru/api/v3';
  let pathList = ['/orders']; // –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫
  if (orderType === 'DBW') pathList = ['/dbw/orders'];
  if (orderType === 'DBS') pathList = ['/dbs/orders'];

  const headers = { 'Authorization': apiKey };

  // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–∞–∫ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è, —Ç–∞–∫ –∏ –Ω–æ–≤—ã–µ (fallback)
  const tryPaths = [...pathList, ...pathList.map(p => p.replace('/orders', '/orders/new'))];

  for (const path of tryPaths) {
    try {
      const resp = await axios.get(`${base}${path}`, { headers });
      const data = resp.data;
      // –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫ –º–∞—Å—Å–∏–≤—É –æ–±—ä–µ–∫—Ç–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ id, gNumber, srid
      if (Array.isArray(data)) return data;
      if (data && Array.isArray(data.orders)) return data.orders;
      if (data && Array.isArray(data.data)) return data.data;
    } catch (e) {
      // –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—É—Ç–∏
    }
  }
  return [];
}

async function fetchWildberriesOrders(apiKey, period = 'week') {
  try {
    console.log('Fetching Wildberries orders...');
    
    // –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    let dateFrom, dateTo;
    const now = new Date();
    
    switch (period) {
      case 'today':
        dateFrom = new Date(now.getFullYear(), now.getMonth(), now.getDate()).toISOString().split('T')[0];
        dateTo = now.toISOString().split('T')[0];
        break;
      case 'week':
        dateFrom = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
        dateTo = now.toISOString().split('T')[0];
        break;
      case 'month':
        dateFrom = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
        dateTo = now.toISOString().split('T')[0];
        break;
      default:
        dateFrom = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
        dateTo = now.toISOString().split('T')[0];
    }
    
    console.log(`Date range: ${dateFrom} to ${dateTo}`);
    
    const response = await axios.get('https://statistics-api.wildberries.ru/api/v1/supplier/orders', {
      headers: {
        'Authorization': apiKey
      },
      params: {
        dateFrom,
        dateTo
      }
    });

    console.log('Wildberries API response:', response.data);

    let orders = [];
    if (response.data && Array.isArray(response.data)) {
      orders = response.data;
    } else if (response.data && response.data.data && Array.isArray(response.data.data)) {
      orders = response.data.data;
    }

    console.log(`Found ${orders.length} orders`);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã —Å–±–æ—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥—Ç—è–Ω—É—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ ID –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ WB API
    // 1) –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–∫–∞–∑—É
    const determineType = (o) => {
      if (o.isFBS !== undefined) return o.isFBS ? 'FBS' : 'DBW';
      if (o.deliveryType) {
        switch (o.deliveryType) {
          case 'fbs': return 'FBS';
          case 'dbw': return 'DBW';
          case 'dbs': return 'DBS';
        }
      }
      if (o.warehouseType && typeof o.warehouseType === 'string') {
        if (o.warehouseType.toLowerCase().includes('–ø—Ä–æ–¥–∞–≤')) return 'FBS';
        if (o.warehouseType.toLowerCase().includes('wb')) return 'DBW';
      }
      return 'FBS';
    };

    const assignmentsByType = await Promise.all([
      fetchWildberriesAssignmentsByType(apiKey, 'FBS'),
      fetchWildberriesAssignmentsByType(apiKey, 'DBW'),
      fetchWildberriesAssignmentsByType(apiKey, 'DBS')
    ]);
    const [fbsAssignments, dbwAssignments, dbsAssignments] = assignmentsByType;

    // –§–æ—Ä–º–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–µ –∫–∞—Ä—Ç—ã –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
    const mapBy = (arr, keyFields) => {
      const m = new Map();
      for (const it of arr || []) {
        const keys = [];
        for (const k of keyFields) if (it[k]) keys.push(String(it[k]));
        const id = it.id || it.orderId || it.orderID || it.order_id || it.uid || it.orderUid || it.gNumber || it.srid;
        if (!id) continue;
        for (const k of keys) m.set(k, String(id));
      }
      return m;
    };

    const fbsMap = mapBy(fbsAssignments, ['gNumber', 'srid']);
    const dbwMap = mapBy(dbwAssignments, ['gNumber', 'srid']);
    const dbsMap = mapBy(dbsAssignments, ['gNumber', 'srid']);

    // 2) –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à–∏–º –∑–∞–∫–∞–∑–∞–º WB id —Å–±–æ—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    const fbsIds = [];
    const dbwIds = [];
    const dbsIds = [];
    for (const o of orders) {
      const type = determineType(o);
      const candidateKeys = [o.gNumber, o.srid].filter(Boolean).map(String);
      let assignmentId;
      if (type === 'FBS') {
        for (const k of candidateKeys) { assignmentId = fbsMap.get(k); if (assignmentId) break; }
      } else if (type === 'DBW') {
        for (const k of candidateKeys) { assignmentId = dbwMap.get(k); if (assignmentId) break; }
      } else if (type === 'DBS') {
        for (const k of candidateKeys) { assignmentId = dbsMap.get(k); if (assignmentId) break; }
      }
      if (assignmentId) {
        if (type === 'FBS') fbsIds.push(assignmentId);
        if (type === 'DBW') dbwIds.push(assignmentId);
        if (type === 'DBS') dbsIds.push(assignmentId);
      }
    }

    const [fbsStatuses, dbwStatuses, dbsStatuses] = await Promise.all([
      fetchWildberriesOrderStatusesByType(apiKey, fbsIds, 'FBS'),
      fetchWildberriesOrderStatusesByType(apiKey, dbwIds, 'DBW'),
      fetchWildberriesOrderStatusesByType(apiKey, dbsIds, 'DBS')
    ]);

    const orderStatuses = [...fbsStatuses, ...dbwStatuses, ...dbsStatuses];

    // –°–æ–∑–¥–∞–µ–º –º–∞–ø—É —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const statusMap = new Map();
    orderStatuses.forEach(status => {
      statusMap.set(status.id, status);
    });

    return orders.map(order => {
      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –∏–∑ Wildberries API (Unix timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
      let orderDate;
      if (order.date) {
        // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Unix timestamp (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã)
        if (typeof order.date === 'number') {
          orderDate = new Date(order.date);
        } else {
          // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏
          orderDate = new Date(order.date);
        }
      } else {
        orderDate = new Date();
      }
      
      const formattedDate = orderDate.toISOString();
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
      let orderType = 'FBS'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
      
      // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–µ–π –æ—Ç–≤–µ—Ç–∞
      if (order.isFBS !== undefined) {
        orderType = order.isFBS ? 'FBS' : 'DBW';
      } else if (order.deliveryType) {
        switch (order.deliveryType) {
          case 'fbs':
            orderType = 'FBS';
            break;
          case 'dbw':
            orderType = 'DBW';
            break;
          case 'dbs':
            orderType = 'DBS';
            break;
        }
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö Wildberries API
      let status = 'new';
      const orderId = order.gNumber || order.srid;
      const orderStatus = statusMap.get(orderId);
      
      // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–±–æ—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö - —Å—á–∏—Ç–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º
      const daysSinceOrder = (Date.now() - orderDate.getTime()) / (1000 * 60 * 60 * 24);
      if (daysSinceOrder > 3 && !orderStatus && !order.isCancel) {
        status = 'delivered'; // –°—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏
      } else if (order.isCancel) {
        status = 'cancelled';
      } else if (orderStatus) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API —Å—Ç–∞—Ç—É—Å–æ–≤ —Å–±–æ—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        const supplierStatus = orderStatus.supplierStatus;
        const wbStatus = orderStatus.wbStatus;
        
        // –ú–∞–ø–ø–∏–Ω–≥ supplierStatus –Ω–∞ –Ω–∞—à–∏ —Å—Ç–∞—Ç—É—Å—ã
        switch (supplierStatus) {
          case 'new':
            status = 'new';
            break;
          case 'confirm':
            status = 'in_assembly';
            break;
          case 'complete':
            status = 'shipped';
            break;
          case 'cancel':
            status = 'cancelled';
            break;
          default:
            status = 'new';
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ wbStatus –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è
        if (wbStatus === 'sold') {
          status = 'delivered';
        } else if (wbStatus === 'canceled' || wbStatus === 'canceled_by_client' || wbStatus === 'declined_by_client') {
          status = 'cancelled';
        } else if (wbStatus === 'ready_for_pickup') {
          status = 'shipped';
        }
      } else if (order.isRealization && order.warehouseType === '–°–∫–ª–∞–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞') {
        status = 'in_assembly'; // –ó–∞–∫–∞–∑ –Ω–∞ —Å–±–æ—Ä–∫–µ
      } else if (order.isRealization && order.warehouseType === '–°–∫–ª–∞–¥ WB') {
        status = 'shipped'; // –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
      } else if (order.isRealization && order.warehouseType === '–°–∫–ª–∞–¥ WB (–¥–æ—Å—Ç–∞–≤–∫–∞)') {
        status = 'delivered'; // –ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω
      } else if (order.status) {
        // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤ Wildberries –Ω–∞ –Ω–∞—à–∏
        const statusMap = {
          'new': 'new',
          'confirm': 'in_assembly',
          'cancel': 'cancelled',
          'delivered': 'delivered',
          'shipped': 'shipped'
        };
        status = statusMap[order.status] || 'new';
      }
      
      return {
        orderId: order.gNumber || order.srid || order.nmId?.toString() || 'unknown',
        totalAmount: order.finishedPrice || order.priceWithDisc || order.totalPrice || 0,
        customerName: '–ö–ª–∏–µ–Ω—Ç Wildberries',
        customerPhone: '',
        customerEmail: '',
        deliveryAddress: `${order.regionName || ''}, ${order.oblastOkrugName || ''}`.replace(/^,\s*|,\s*$/g, '') || '–ù–µ —É–∫–∞–∑–∞–Ω',
        status: status,
        marketplace: 'wildberries',
        orderType: orderType,
        orderDate: formattedDate,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–∞—Ö
        supplierStatus: orderStatus?.supplierStatus || null,
        wbStatus: orderStatus?.wbStatus || null,
        items: [{
          article: order.supplierArticle || order.nmId?.toString() || 'unknown',
          name: `${order.subject || ''} ${order.brand ? `(${order.brand})` : ''}`.trim() || '–¢–æ–≤–∞—Ä',
          quantity: 1,
          price: order.finishedPrice || order.priceWithDisc || 0,
          totalPrice: order.finishedPrice || order.priceWithDisc || 0
        }]
      };
    });

  } catch (err) {
    console.error('Wildberries API error:', err.response?.data || err.message);
    return [];
  }
}

async function fetchOzonOrders(apiKey, clientId) {
  try {
    const response = await axios.post('https://api-seller.ozon.ru/v3/posting/list', {
      filter: {
        since: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
        to: new Date().toISOString()
      },
      limit: 100
    }, {
      headers: {
        'Client-Id': clientId,
        'Api-Key': apiKey
      }
    });

    return response.data.result.postings.map(posting => ({
      orderId: posting.order_id.toString(),
      totalAmount: posting.total_price || 0,
      customerName: posting.customer?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      customerPhone: posting.customer?.phone || '',
      customerEmail: posting.customer?.email || '',
      deliveryAddress: posting.delivery_method?.warehouse?.address || '–ù–µ —É–∫–∞–∑–∞–Ω',
      status: posting.status || 'new',
      marketplace: 'ozon',
      items: posting.products.map(product => ({
        article: product.offer_id,
        name: product.name,
        quantity: product.quantity,
        price: product.price,
        totalPrice: product.price * product.quantity
      }))
    }));
  } catch (err) {
    console.error('Ozon API error:', err);
    return [];
  }
}

async function fetchYandexMarketOrders(apiKey) {
  try {
    const response = await axios.get('https://api.partner.market.yandex.ru/v2/campaigns/orders', {
      headers: {
        'Authorization': `OAuth ${apiKey}`
      },
      params: {
        fromDate: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString(),
        toDate: new Date().toISOString(),
        pageSize: 100
      }
    });

    return response.data.orders.map(order => ({
      orderId: order.id.toString(),
      totalAmount: order.totalPrice || 0,
      customerName: order.customer?.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      customerPhone: order.customer?.phone || '',
      customerEmail: order.customer?.email || '',
      deliveryAddress: order.delivery?.address || '–ù–µ —É–∫–∞–∑–∞–Ω',
      status: order.status || 'new',
      marketplace: 'yandex_market',
      items: order.items.map(item => ({
        article: item.offerId,
        name: item.name,
        quantity: item.count,
        price: item.price,
        totalPrice: item.price * item.count
      }))
    }));
  } catch (err) {
    console.error('Yandex Market API error:', err);
    return [];
  }
}

// –û–±–æ–≥–∞—â–µ–Ω–∏–µ: –Ω–æ–≤—ã–µ —Å–±–æ—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è WB + –æ–ø–∏—Å–∞–Ω–∏–µ + —Å—Ç–∞—Ç—É—Å—ã (FBS/DBW/DBS)
async function fetchEnrichedWbNewAssignments(apiKey) {
  const types = ['FBS', 'DBW', 'DBS'];
  const resultsByType = await Promise.all(types.map(async (t) => {
    // –ø–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Ç–∏–ø–∞ (—Ñ—É–Ω–∫—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∏ /orders, –∏ /orders/new)
    const assignments = await fetchWildberriesAssignmentsByType(apiKey, t);
    if (!assignments || assignments.length === 0) return [];

    // —Å–æ–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
    const ids = [];
    for (const a of assignments) {
      const id = a.id || a.orderId || a.orderID || a.order_id || a.uid || a.orderUid;
      if (id) ids.push(String(id));
    }

    const statuses = await fetchWildberriesOrderStatusesByType(apiKey, ids, t);
    const statusMap = new Map();
    for (const s of statuses || []) {
      statusMap.set(String(s.id), s);
    }

    // —Å–æ–±–∏—Ä–∞–µ–º nmId –¥–ª—è –¥–æ–ø.–æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (subject/brand/article)
    const nmIds = [];
    for (const a of assignments) {
      if (a.nmId) nmIds.push(Number(a.nmId));
    }
    const metaByNm = await fetchWbProductMetaByNmIds(apiKey, nmIds);

    // –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    const normalize = (a) => {
      const id = String(a.id || a.orderId || a.orderID || a.order_id || a.uid || a.orderUid || a.gNumber || a.srid || '');
      const st = statusMap.get(id);
      // –ø–æ–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –∑–∞–¥–∞–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
      const meta = a.nmId ? metaByNm.get(Number(a.nmId)) : undefined;
      const subject = a.subject || a.subjectName || a.category || meta?.subject || '';
      const brand = a.brand || a.vendor || meta?.brand || '';
      const name = a.name || a.title || meta?.name || (subject ? `${subject}${brand ? ` (${brand})` : ''}` : '–¢–æ–≤–∞—Ä');
      const quantity = a.quantity || a.qty || 1;
      const price = a.finishedPrice || a.priceWithDisc || a.price || 0;
      const totalPrice = typeof a.totalPrice === 'number' ? a.totalPrice : (price * quantity);
      const deliveryAddress = a.deliveryAddress?.address || a.address || a.regionName || '';
      const createdAt = a.createdAt || a.date || a.created || a.createDt || null;
      const orderDate = createdAt ? new Date(createdAt).toISOString() : new Date().toISOString();

      // –º–∞–ø–ø–∏–Ω–≥ supplierStatus -> –Ω–∞—à —Å—Ç–∞—Ç—É—Å
      let status = 'new';
      if (st) {
        const supplierStatus = st.supplierStatus;
        const wbStatus = st.wbStatus;
        switch (supplierStatus) {
          case 'new': status = 'new'; break;
          case 'confirm': status = 'in_assembly'; break;
          case 'complete': status = 'shipped'; break;
          case 'cancel': status = 'cancelled'; break;
          default: status = 'new';
        }
        if (wbStatus === 'sold') status = 'delivered';
        if (wbStatus === 'ready_for_pickup') status = 'shipped';
        if (wbStatus === 'canceled' || wbStatus === 'canceled_by_client' || wbStatus === 'declined_by_client') status = 'cancelled';
      } else if (a.status) {
        const statusMapLocal = { new: 'new', confirm: 'in_assembly', complete: 'shipped', cancel: 'cancelled' };
        status = statusMapLocal[a.status] || 'new';
      }

      return {
        id,
        gNumber: a.gNumber || null,
        srid: a.srid || null,
        marketplace: 'wildberries',
        orderType: t,
        orderDate,
        status,
        supplierStatus: st?.supplierStatus || null,
        wbStatus: st?.wbStatus || null,
        items: [{
          article: a.supplierArticle || meta?.supplierArticle || a.nmId?.toString() || 'unknown',
          name,
          quantity,
          price,
          totalPrice
        }],
        deliveryAddress: deliveryAddress || '–ù–µ —É–∫–∞–∑–∞–Ω'
      };
    };

    return assignments.map(normalize);
  }));

  return resultsByType.flat();
}

// –î–æ–ø.–º–µ—Ç–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º –∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (subject/brand/supplierArticle) –ø–æ nmId
async function fetchWbProductMetaByNmIds(apiKey, nmIds) {
  const map = new Map();
  if (!nmIds || nmIds.length === 0) return map;
  try {
    const unique = Array.from(new Set(nmIds.filter(n => Number.isFinite(n))));
    if (unique.length === 0) return map;

    // –ë–µ—Ä—ë–º –Ω–µ–±–æ–ª—å—à–æ–π –ø–µ—Ä–∏–æ–¥, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –±—ã–ª –∫–æ–º–ø–∞–∫—Ç–Ω—ã–º
    const now = new Date();
    const dateTo = now.toISOString().split('T')[0];
    const dateFrom = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];

    const resp = await axios.get('https://statistics-api.wildberries.ru/api/v1/supplier/orders', {
      headers: { 'Authorization': apiKey },
      params: { dateFrom, dateTo }
    });
    const rows = Array.isArray(resp.data) ? resp.data : (resp.data?.data || []);
    for (const r of rows) {
      const nm = Number(r.nmId || r.nmid || r.nmID);
      if (!Number.isFinite(nm)) continue;
      if (!unique.includes(nm)) continue;
      if (!map.has(nm)) {
        map.set(nm, {
          name: r.subject && r.brand ? `${r.subject} (${r.brand})` : (r.subject || r.brand || undefined),
          subject: r.subject || undefined,
          brand: r.brand || undefined,
          supplierArticle: r.supplierArticle || r.article || undefined
        });
      }
    }
  } catch (e) {
    // —Ç–∏—Ö–æ –ø—Ä–æ–¥–æ–ª–∂–∏–º –±–µ–∑ –º–µ—Ç—ã
  }
  return map;
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç: –Ω–æ–≤—ã–µ —Å–±–æ—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è WB (–æ–±–æ–≥–∞—â—ë–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏)
router.get('/wb/assignments/new', requireClient, async (req, res) => {
  try {
    const client = await pool.connect();
    try {
      const r = await client.query('SELECT api_keys FROM clients WHERE user_id = $1', [req.user.id]);
      if (r.rows.length === 0) return res.status(404).json({ error: 'Client not found' });
      const wbKey = r.rows[0].api_keys?.wildberries?.api_key;
      if (!wbKey) return res.status(400).json({ error: 'Wildberries API key not configured' });

      const data = await fetchEnrichedWbNewAssignments(wbKey);
      res.json({ assignments: data });
    } finally {
      client.release();
    }
  } catch (e) {
    console.error('WB enriched assignments error:', e.response?.data || e.message);
    res.status(500).json({ error: 'Failed to fetch WB assignments' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç: ¬´–Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã¬ª WB –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å —á–µ—Ä–µ–∑ Statistics API
router.get('/wb/orders/today', requireClient, async (req, res) => {
  try {
    const client = await pool.connect();
    try {
      const r = await client.query('SELECT api_keys FROM clients WHERE user_id = $1', [req.user.id]);
      if (r.rows.length === 0) return res.status(404).json({ error: 'Client not found' });
      const wbKey = r.rows[0].api_keys?.wildberries?.api_key;
      if (!wbKey) return res.status(400).json({ error: 'Wildberries API key not configured' });

      // –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –∏ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ –Ω–∞ –±–∞–∑–µ Statistics API
      const orders = await fetchWildberriesOrders(wbKey, 'today');
      res.json({ orders });
    } finally {
      client.release();
    }
  } catch (e) {
    console.error('WB today orders error:', e.response?.data || e.message);
    res.status(500).json({ error: 'Failed to fetch today WB orders' });
  }
});

// ===== –¢–û–í–ê–†–´ –ú–ê–ì–ê–ó–ò–ù–ê =====

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
router.get('/store-products', requireClient, async (req, res) => {
  try {
    const client = await pool.connect();
    try {
      // –ü–æ–ª—É—á–∞–µ–º client_id
      const clientResult = await client.query(
        `SELECT id FROM clients WHERE user_id = $1`,
        [req.user.id]
      );

      if (clientResult.rows.length === 0) {
        return res.status(404).json({ error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      const clientId = clientResult.rows[0].id;

      const productsResult = await client.query(
        `SELECT * FROM wb_products_cache 
         WHERE client_id = $1 
         ORDER BY last_updated DESC, created_at DESC`,
        [clientId]
      );

      res.json({
        products: productsResult.rows,
        total: productsResult.rows.length
      });
    } finally {
      client.release();
    }
  } catch (err) {
    console.error('Store products error:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤' });
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ Wildberries API
router.post('/store-products/load', requireClient, async (req, res) => {
  try {
    const client = await pool.connect();
    try {
      // –ü–æ–ª—É—á–∞–µ–º client_id –∏ API –∫–ª—é—á–∏
      const clientResult = await client.query(
        `SELECT id, api_keys, user_id FROM clients WHERE user_id = $1`,
        [req.user.id]
      );

      if (clientResult.rows.length === 0) {
        return res.status(404).json({ error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      const clientId = clientResult.rows[0].id;
      const apiKeys = clientResult.rows[0].api_keys || {};
      const wildberriesKey = apiKeys.wildberries?.api_key;

      if (!wildberriesKey) {
        return res.status(400).json({ 
          error: 'API –∫–ª—é—á Wildberries –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
          details: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö'
        });
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
      const WildberriesPricingService = require('../services/wildberriesPricingService');
      const wbService = new WildberriesPricingService();
      
      const products = await wbService.fetchSupplierProducts(wildberriesKey, req.user.id);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      res.json({
        success: true,
        message: `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤`,
        products: products.map(p => ({
          nm_id: p.nm_id,
          article: p.article,
          name: p.name,
          brand: p.brand,
          category: p.category,
          current_price: p.current_price,
          commission_percent: p.commission_percent,
          logistics_cost: p.logistics_cost,
          is_active: p.is_active
        }))
      });

    } finally {
      client.release();
    }
  } catch (err) {
    console.error('Load store products error:', err);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤',
      details: err.message 
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –°–ò–ú–ê –õ–ï–ù–î
router.get('/sima-land/products', requireClient, async (req, res) => {
  try {
    const client = await pool.connect();
    try {
      // –ü–æ–ª—É—á–∞–µ–º client_id –∏ API –∫–ª—é—á–∏
      const clientResult = await client.query(
        `SELECT id, api_keys, user_id FROM clients WHERE user_id = $1`,
        [req.user.id]
      );

      if (clientResult.rows.length === 0) {
        return res.status(404).json({ error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      const clientId = clientResult.rows[0].id;
      const apiKeys = clientResult.rows[0].api_keys || {};
      const simaLandToken = apiKeys.sima_land?.token;

      if (!simaLandToken) {
        return res.status(400).json({ 
          error: '–¢–æ–∫–µ–Ω API –°–ò–ú–ê –õ–ï–ù–î –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
          details: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω API –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö'
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –ë–î
      const productsResult = await client.query(
        `SELECT id, article, name, brand, category, purchase_price, available_quantity, image_url, description
         FROM sima_land_products
         WHERE client_id = $1
         ORDER BY created_at DESC`,
        [clientId]
      );

      res.json({
        success: true,
        products: productsResult.rows
      });

    } finally {
      client.release();
    }
  } catch (err) {
    console.error('Get sima-land products error:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –°–ò–ú–ê –õ–ï–ù–î' });
  }
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –°–ò–ú–ê –õ–ï–ù–î
router.post('/sima-land/products/load', requireClient, async (req, res) => {
  try {
    const client = await pool.connect();
    try {
      // –ü–æ–ª—É—á–∞–µ–º client_id –∏ API –∫–ª—é—á–∏
      const clientResult = await client.query(
        `SELECT id, api_keys, user_id FROM clients WHERE user_id = $1`,
        [req.user.id]
      );

      if (clientResult.rows.length === 0) {
        return res.status(404).json({ error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      const clientId = clientResult.rows[0].id;
      const apiKeys = clientResult.rows[0].api_keys || {};
      const simaLandToken = apiKeys.sima_land?.token;

      if (!simaLandToken) {
        return res.status(400).json({ 
          error: '–¢–æ–∫–µ–Ω API –°–ò–ú–ê –õ–ï–ù–î –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
          details: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–∫–µ–Ω API –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö'
        });
      }

      // –ï—Å–ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ —É–∂–µ –∏–¥—ë—Ç –∏–º–ø–æ—Ä—Ç ‚Äî –≤–µ—Ä–Ω—ë–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π jobId
      const progressStore = require('../services/progressStore');
      const running = progressStore.getRunningImportJobByClient(clientId);
      if (running) {
        return res.status(202).json({ success: true, jobId: running.id, alreadyRunning: true });
      }

      // –°–æ–∑–¥–∞—ë–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º jobId
      const categories = Array.isArray(req.body?.categories) ? req.body.categories.filter(Boolean) : [];
      const jobId = progressStore.createJob('simaLandImport', { clientId, categories });

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const SimaLandService = require('../services/simaLandService');
      const simaLandService = new SimaLandService();
      simaLandService.loadProductsForClient(clientId, simaLandToken, jobId, { categories })
        .catch(err => {
          console.error('Sima-land import failed:', err);
          progressStore.failJob(jobId, err.message);
        });

      return res.status(202).json({ success: true, jobId });

    } finally {
      client.release();
    }
  } catch (err) {
    console.error('Load sima-land products error:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –°–ò–ú–ê –õ–ï–ù–î' });
  }
});

// –°—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –°–ò–ú–ê –õ–ï–ù–î
router.get('/sima-land/products/status', requireClient, async (req, res) => {
  const { jobId } = req.query;
  if (!jobId) return res.status(400).json({ error: 'jobId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
  const progressStore = require('../services/progressStore');
  const job = progressStore.getJob(String(jobId));
  if (!job) return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  return res.json(job);
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –°–ò–ú–ê –õ–ï–ù–î –≤ –∫–∞—Ç–∞–ª–æ–≥ –∫–ª–∏–µ–Ω—Ç–∞
router.post('/sima-land/products/add', requireClient, async (req, res) => {
  try {
    const { article, name, brand, category, purchase_price, image_url } = req.body;

    if (!article || !name) {
      return res.status(400).json({ error: '–ê—Ä—Ç–∏–∫—É–ª –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const client = await pool.connect();
    try {
      // –ü–æ–ª—É—á–∞–µ–º client_id
      const clientResult = await client.query(
        `SELECT id FROM clients WHERE user_id = $1`,
        [req.user.id]
      );

      if (clientResult.rows.length === 0) {
        return res.status(404).json({ error: '–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }

      const clientId = clientResult.rows[0].id;

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥ –∫–ª–∏–µ–Ω—Ç–∞
      const SimaLandService = require('../services/simaLandService');
      const simaLandService = new SimaLandService();
      
      const productId = await simaLandService.addClientProduct(clientId, {
        article,
        name,
        brand,
        category,
        purchase_price,
        image_url
      });

      res.json({
        success: true,
        message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥',
        productId
      });

    } finally {
      client.release();
    }
  } catch (err) {
    console.error('Add sima-land product error:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞' });
  }
});

module.exports = router;


