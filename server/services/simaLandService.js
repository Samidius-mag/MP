const axios = require('axios');
const { pool } = require('../config/database');

class SimaLandService {
  constructor() {
    this.baseUrl = 'https://www.sima-land.ru/api/v3';
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ –∏–∑ API sima-land v3
   * –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API v3
   * @param {Object} product - –û–±—ä–µ–∫—Ç —Ç–æ–≤–∞—Ä–∞ –∏–∑ API
   * @param {Array} stockData - –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   * @returns {Object} - –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
   */
  parseProduct(product, stockData = []) {
    if (!product || typeof product !== 'object') {
      return null;
    }

    // ID —Ç–æ–≤–∞—Ä–∞ - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç id, –∑–∞—Ç–µ–º sid
    const id = product.id || product.sid || null;

    // –ê—Ä—Ç–∏–∫—É–ª (SID - —Å–ª—É–∂–µ–±–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä) - —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞
    const article = product.sid?.toString() || 
                   product.article?.toString() || 
                   product.id?.toString() || 
                   '';

    // –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    const name = product.name || 
                 product.title || 
                 product.full_name || 
                 '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';

    // –ë—Ä–µ–Ω–¥ - –∏–∑ –æ–±—ä–µ–∫—Ç–∞ trademark –∏–ª–∏ –ø—Ä—è–º–æ–≥–æ –ø–æ–ª—è brand
    const brand = product.trademark?.name || 
                  product.brand?.name || 
                  product.brand || 
                  null;

    // –ö–∞—Ç–µ–≥–æ—Ä–∏—è - –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–µ series!)
    // API v3 –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö:
    // - –æ–±—ä–µ–∫—Ç {id, name} 
    // - –ø—Ä–æ—Å—Ç–æ ID (—á–∏—Å–ª–æ)
    // - –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π [{id, name}]
    // - –ø–æ–ª–µ category_id –æ—Ç–¥–µ–ª—å–Ω–æ
    let categoryId = null;
    let categoryName = null;
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 1: –æ–±—ä–µ–∫—Ç category —Å –ø–æ–ª—è–º–∏ id –∏ name
    if (product.category) {
      if (Array.isArray(product.category)) {
        // –ï—Å–ª–∏ category - –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        const firstCategory = product.category[0];
        if (firstCategory && typeof firstCategory === 'object') {
          categoryId = firstCategory.id || firstCategory.category_id || null;
          categoryName = firstCategory.name || firstCategory.title || null;
        }
      } else if (typeof product.category === 'object') {
        categoryId = product.category.id || product.category.category_id || null;
        categoryName = product.category.name || product.category.title || null;
      } else {
        // –ï—Å–ª–∏ category - –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ (ID)
        categoryId = product.category;
      }
    }
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 2: –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ category_id
    if (!categoryId && product.category_id) {
      categoryId = product.category_id;
    }
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç 3: categories (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ) - –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (!categoryId && product.categories && Array.isArray(product.categories) && product.categories.length > 0) {
      const firstCategory = product.categories[0];
      if (firstCategory && typeof firstCategory === 'object') {
        categoryId = firstCategory.id || firstCategory.category_id || null;
        categoryName = firstCategory.name || firstCategory.title || null;
      }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å category_id –Ω–æ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –ø–æ–ª–µ–π
    if (categoryId && !categoryName) {
      if (product.categoryName) {
        categoryName = product.categoryName;
      } else if (product.category_name) {
        categoryName = product.category_name;
      }
    }

    // –°–µ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ (series - —ç—Ç–æ –ù–ï –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∞ —Å–µ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞!)
    // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const series = product.series?.name || 
                   product.series || 
                   null;

    // –¶–µ–Ω–∞ –∑–∞–∫—É–ø–∫–∏
    // –°–æ–≥–ª–∞—Å–Ω–æ API v3, –ø–æ–ª–µ price —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–Ω—É –∑–∞–∫—É–ø–∫–∏
    const purchasePrice = product.price || 
                         product.purchase_price || 
                         product.base_price || 
                         product.cost_price || 
                         0;

    // –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ
    let availableQuantity = 0;
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ stockData –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
    if (article && stockData && stockData.length > 0) {
      const stockItem = stockData.find(s => 
        (s.sid?.toString() === article) || 
        (s.article?.toString() === article) || 
        (s.id?.toString() === article)
      );
      if (stockItem) {
        availableQuantity = stockItem.balance || 
                           stockItem.quantity || 
                           stockItem.available_quantity || 
                           0;
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ stockData, –∏—Å–ø–æ–ª—å–∑—É–µ–º balance –∏–∑ —Ç–æ–≤–∞—Ä–∞
    if (availableQuantity === 0 && product.balance !== undefined && product.balance !== null) {
      availableQuantity = parseInt(product.balance) || 0;
    }

    // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    // –°–æ–≥–ª–∞—Å–Ω–æ API v3, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–æ–ª—è—Ö img –∏–ª–∏ photoUrl
    // img –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º {url} –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
    let imageUrl = null;
    
    if (product.img) {
      if (typeof product.img === 'object') {
        imageUrl = product.img.url || product.img.src || product.img.link || null;
      } else {
        imageUrl = product.img;
      }
    } else if (product.photoUrl) {
      imageUrl = product.photoUrl;
    } else if (product.photo_url) {
      imageUrl = product.photo_url;
    } else if (product.image_url) {
      imageUrl = product.image_url;
    } else if (product.imageUrl) {
      imageUrl = product.imageUrl;
    } else if (product.image) {
      imageUrl = typeof product.image === 'object' ? product.image.url : product.image;
    } else if (product.photo) {
      imageUrl = typeof product.photo === 'object' ? product.photo.url : product.photo;
    }

    // –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    // stuff - –º–∞—Ç–µ—Ä–∏–∞–ª —Ç–æ–≤–∞—Ä–∞, description - –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    const description = product.stuff || 
                       product.description || 
                       product.full_description || 
                       product.about || 
                       null;

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±—É–¥—É—â–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    const parsedProduct = {
      id,
      article,
      name,
      brand,
      category_id: categoryId,
      category: categoryName || series, // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–∏—é –∫–∞–∫ fallback
      series, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Ä–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      purchase_price: parseFloat(purchasePrice) || 0,
      available_quantity: parseInt(availableQuantity) || 0,
      image_url: imageUrl,
      description
    };

    return parsedProduct;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ API sima-land v3
   * –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API v3: https://www.sima-land.ru/api/v3/help/#–ö–∞—Ç–µ–≥–æ—Ä–∏—è-—Ç–æ–≤–∞—Ä–æ–≤
   * –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è —Å –ø–æ–ª—è–º–∏: id, name, parent_id, depth (—É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏)
   * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async fetchCategories(token, options = {}) {
    try {
      const perPage = options.perPage || 1000;
      const allCategories = [];
      let page = 1;
      let hasMore = true;

      while (hasMore) {
        const response = await axios.get(`${this.baseUrl}/category/`, {
          params: {
            'per-page': perPage,
            page: page
          },
          headers: {
            'x-api-key': token,
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          timeout: 30000
        });

        const items = response.data.items || [];
        const meta = response.data._meta || {};

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ API v3
        // –ü–æ–ª—è: id, name, parent_id, depth (—É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏)
        for (const category of items) {
          allCategories.push({
            id: category.id,
            name: category.name || '',
            parent_id: category.parent_id || null,
            depth: category.depth || category.level || null
          });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const currentPage = meta.currentPage || page;
        const pageCount = meta.pageCount || 1;
        hasMore = currentPage < pageCount && items.length > 0;
        page++;

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        if (page > 100) {
          console.warn('Sima-land categories: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É');
          break;
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits
        if (hasMore) {
          await new Promise(resolve => setTimeout(resolve, 100));
        }
      }

      console.log(`üìö –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${allCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ API sima-land`);
      return allCategories;
    } catch (error) {
      console.error('Sima-land categories API error:', error.response?.data || error.message);
      // –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω API –∫–ª–∏–µ–Ω—Ç–∞
   */
  async getClientToken(clientId) {
    const client = await pool.connect();
    try {
      const result = await client.query(
        'SELECT api_keys FROM clients WHERE id = $1',
        [clientId]
      );

      if (result.rows.length === 0) {
        throw new Error('Client not found');
      }

      const apiKeys = result.rows[0].api_keys || {};
      return apiKeys.sima_land?.token;
    } finally {
      client.release();
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ API –°–ò–ú–ê –õ–ï–ù–î
   * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://www.sima-land.ru/api/v3/help/
   */
  async fetchProducts(token, page = 1, perPage = 50, idGreaterThan = null, options = {}) {
    const maxRetries = 3;
    let attempt = 0;
    const makeRequest = async () => {
      const logPage = idGreaterThan ? `idGreaterThan ${idGreaterThan}` : `page ${page}`;
      console.log(`Fetching Sima-land products: ${logPage}, perPage ${perPage}`);

      // –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ x-api-key —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
      const params = {
        'per-page': perPage,
        ...(idGreaterThan ? { 'id-greater-than': idGreaterThan } : { page }),
      };
      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API v3
      // –ü–∞—Ä–∞–º–µ—Ç—Ä –º–æ–∂–µ—Ç –±—ã—Ç—å category_id –∏–ª–∏ category_ids
      if (options?.categories && Array.isArray(options.categories) && options.categories.length > 0) {
        // API v3 –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤
        const categoryIds = options.categories.map(id => parseInt(id)).filter(id => !isNaN(id));
        if (categoryIds.length > 0) {
          // –í–∞—Ä–∏–∞–Ω—Ç 1: –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤ –≤ query string (category_id[]=1&category_id[]=2)
          // –í–∞—Ä–∏–∞–Ω—Ç 2: –ø–µ—Ä–µ–¥–∞–µ–º —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (category_id=1,2)
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Å –∑–∞–ø—è—Ç–æ–π, —Ç–∞–∫ –∫–∞–∫ axios –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞—Å—Å–∏–≤
          if (categoryIds.length === 1) {
            params['category_id'] = categoryIds[0];
          } else {
            params['category_id'] = categoryIds.join(',');
          }
        }
      }

      const response = await axios.get(`${this.baseUrl}/item/`, {
        params,
        headers: {
          'x-api-key': token,
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        timeout: 30000,
        httpAgent: new (require('http').Agent)({ keepAlive: true }),
        httpsAgent: new (require('https').Agent)({ keepAlive: true })
      });

      return {
        items: response.data.items || [],
        total: response.data._meta?.totalCount || 0,
        pageCount: response.data._meta?.pageCount || 1,
        currentPage: response.data._meta?.currentPage || 1
      };
    };

    try {
      return await makeRequest();
    } catch (error) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ rate limit'–æ–≤ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
      const status = error?.response?.status;
      if (status === 429 || status === 503 || status === 504) {
        const retryAfter = Number(error?.response?.headers?.['retry-after']) || 3;
        await new Promise(r => setTimeout(r, retryAfter * 1000));
        return await makeRequest();
      }
      // –°–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ (ECONNRESET/ETIMEDOUT –∏ —Ç.–ø.) ‚Äî –ø–æ–≤—Ç–æ—Ä–∏–º –¥–æ 3 —Ä–∞–∑ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
      const transientCodes = ['ECONNRESET', 'ETIMEDOUT', 'EAI_AGAIN', 'ENETUNREACH', 'ECONNREFUSED'];
      if (transientCodes.includes(error?.code) && attempt < maxRetries) {
        attempt++;
        const delayMs = 1000 * Math.pow(2, attempt); // 2s, 4s, 8s
        console.warn(`Transient error ${error.code}. Retry ${attempt}/${maxRetries} in ${delayMs}ms`);
        await new Promise(r => setTimeout(r, delayMs));
        return await makeRequest();
      }
      console.error('Sima-land API error:', error.response?.data || error.message);
      const wrapped = new Error(`Failed to fetch products: ${error.response?.statusText || error.message}`);
      if (error.response) wrapped.response = error.response; // preserve status for callers
      if (error.code) wrapped.code = error.code;
      throw wrapped;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
   * –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
   */
  async fetchStock(token) {
    try {
      console.log('Fetching Sima-land stock');

      // –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –æ—Å—Ç–∞—Ç–∫–æ–≤
      const endpoints = [
        '/inventory/',
        '/stock/',
        '/warehouse/',
        '/balance/'
      ];

      for (const endpoint of endpoints) {
        try {
          const response = await axios.get(`${this.baseUrl}${endpoint}`, {
            headers: {
              'x-api-key': token,
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            }
          });

          console.log(`‚úÖ Successfully fetched stock from ${endpoint}`);
          return response.data.items || response.data || [];
        } catch (err) {
          // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –ø–æ–ø—ã—Ç–∫—É, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–æ–≤–∞–ª–µ
          continue;
        }
      }

      // –ï—Å–ª–∏ –≤—Å–µ endpoints –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º balance –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤
      console.log('‚ÑπÔ∏è Stock API endpoints not available, will use balance from products');
      return [];
    } catch (error) {
      console.error('Sima-land stock API error:', error.response?.data || error.message);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –ë–î
   */
  async getClientProducts(clientId) {
    const client = await pool.connect();
    try {
      const result = await client.query(
        `SELECT id, article, name, brand, category, purchase_price, available_quantity, image_url, description
         FROM sima_land_products
         WHERE client_id = $1
         ORDER BY created_at DESC`,
        [clientId]
      );

      return result.rows;
    } finally {
      client.release();
    }
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥
   */
  async addClientProduct(clientId, productData) {
    const client = await pool.connect();
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º
      const existingProduct = await client.query(
        'SELECT id FROM sima_land_products WHERE client_id = $1 AND article = $2',
        [clientId, productData.article]
      );

      if (existingProduct.rows.length > 0) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–≤–∞—Ä
        const updateResult = await client.query(
          `UPDATE sima_land_products 
           SET name = $3, brand = $4, category = $5, purchase_price = $6, 
               available_quantity = $7, image_url = $8, description = $9, updated_at = NOW()
           WHERE client_id = $1 AND article = $2
           RETURNING id`,
          [
            clientId,
            productData.article,
            productData.name,
            productData.brand,
            productData.category,
            productData.purchase_price,
            productData.available_quantity || 0,
            productData.image_url,
            productData.description
          ]
        );

        return updateResult.rows[0].id;
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
        const insertResult = await client.query(
          `INSERT INTO sima_land_products 
           (client_id, article, name, brand, category, purchase_price, available_quantity, image_url, description)
           VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
           RETURNING id`,
          [
            clientId,
            productData.article,
            productData.name,
            productData.brand,
            productData.category,
            productData.purchase_price,
            productData.available_quantity || 0,
            productData.image_url,
            productData.description
          ]
        );

        return insertResult.rows[0].id;
      }
    } finally {
      client.release();
    }
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
   */
  async loadProductsForClient(clientId, token, progressJobId, options = {}) {
    const progressStore = progressJobId ? require('./progressStore') : null;
    const client = await pool.connect();
    try {
      // –ö—É—Ä—Å–æ—Ä–Ω–∞—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è —á–µ—Ä–µ–∑ id-greater-than (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è API –ø—Ä–∏ –±–æ–ª—å—à–∏—Ö –æ—Ñ—Ñ—Å–µ—Ç–∞—Ö)
      const perPage = 100;
      let cursorId = null; // –ø–æ—Å–ª–µ–¥–Ω–∏–π id –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–∞—á–∫–µ
      let batchIndex = 0;
      let totalFetched = 0;

      // –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
      let stockData = [];
      try {
        stockData = await this.fetchStock(token);
        console.log(`Fetched ${stockData.length} stock items`);
      } catch (err) {
        console.warn(`Could not fetch stock data:`, err.message);
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä—ã –±–∞—Ç—á–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –¥–µ—Ä–∂–∞—Ç—å –≤—Å—ë –≤ –ø–∞–º—è—Ç–∏
      let savedCount = 0;
      let imagesCount = 0;
      while (true) {
        batchIndex++;
        let result;
        try {
          result = await this.fetchProducts(token, 1, perPage, cursorId, options);
        } catch (e) {
          // –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ page-–æ—Ñ—Å–µ—Ç–µ, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –∫—É—Ä—Å–æ—Ä–Ω—É—é –ø–∞–≥–∏–Ω–∞—Ü–∏—é
          result = { items: [] };
        }

        const items = result.items || [];
        if (items.length === 0) break;
        totalFetched += items.length;

        if (progressStore && progressJobId) {
          // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–µ–∑ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ç–æ—Ç–∞–ª–∞ ‚Äî —É—Å–ª–æ–≤–Ω—ã–π, –Ω–µ –±–æ–ª–µ–µ 50%
          const pseudoProgress = Math.min(50, Math.floor(Math.log10(1 + totalFetched) * 20));
          progressStore.setProgress(progressJobId, pseudoProgress, {
            stage: 'fetching',
            batchIndex,
            batchSize: items.length,
            totalFetched
          });
        }

        for (let i = 0; i < items.length; i++) {
          const product = items[i];
          try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–∞
            const parsedProduct = this.parseProduct(product, stockData);
            
            if (!parsedProduct || !parsedProduct.article) {
              console.warn(`Skipping product with missing article:`, product.id || product.sid);
              continue;
            }

            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            if (parsedProduct.image_url) {
              imagesCount++;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            await client.query(
              `INSERT INTO sima_land_products 
               (client_id, article, name, brand, category, purchase_price, available_quantity, image_url, description)
               VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
               ON CONFLICT (client_id, article) 
               DO UPDATE SET 
                 name = EXCLUDED.name,
                 brand = EXCLUDED.brand,
                 category = EXCLUDED.category,
                 purchase_price = EXCLUDED.purchase_price,
                 available_quantity = EXCLUDED.available_quantity,
                 image_url = EXCLUDED.image_url,
                 description = EXCLUDED.description,
                 updated_at = NOW()`,
              [
                clientId,
                parsedProduct.article,
                parsedProduct.name,
                parsedProduct.brand,
                parsedProduct.category,
                parsedProduct.purchase_price,
                parsedProduct.available_quantity,
                parsedProduct.image_url,
                parsedProduct.description
              ]
            );

            savedCount++;
            if (progressStore && progressJobId) {
              const base = 50; // –ø–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞, –≤—Ç–æ—Ä–∞—è ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
              const saveProgress = Math.min(50, Math.floor(Math.log10(1 + savedCount) * 20));
              progressStore.setProgress(progressJobId, base + saveProgress, {
                stage: 'saving',
                savedItems: savedCount,
                imagesWithUrl: imagesCount
              });
            }
          } catch (err) {
            console.error(`Error saving product ${product.sid || product.id || 'unknown'}:`, err.message);
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏–º id
        const last = items[items.length - 1];
        cursorId = last?.id || last?.sid || cursorId;
      }

      console.log(`‚úÖ Saved ${savedCount} products for client ${clientId}`);
      console.log(`üì∏ Found images for ${imagesCount} out of ${savedCount} products`);

      const result = {
        total: savedCount,
        saved: savedCount,
        images: imagesCount
      };

      if (progressStore && progressJobId) {
        progressStore.finishJob(progressJobId, result);
      }
      return result;
    } finally {
      client.release();
    }
  }

  async loadCatalog(options = {}, progressJobId) {
    const progressStore = progressJobId ? require('./progressStore') : null;
    const client = await pool.connect();
    const token = process.env.SIMA_LAND_STATIC_TOKEN;
    if (!token) throw new Error('SIMA_LAND_STATIC_TOKEN is not set');
    try {
      console.log('üîÑ Starting Sima-land catalog load', {
        categories: Array.isArray(options.categories) ? options.categories : [],
        jobId: progressJobId
      });
      const perPage = 200;
      let cursorId = null;
      let savedCount = 0;
      let batchIndex = 0;

      // –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ id –≤ –ë–î (–µ—Å–ª–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω–∞ –ø–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
      const fullSync = options.fullSync === true;
      if (!fullSync) {
        try {
          const r = await client.query(`SELECT COALESCE(MAX(id),0) AS max_id FROM sima_land_catalog`);
          const maxId = r.rows[0]?.max_id;
          if (maxId && Number(maxId) > 0) {
            cursorId = Number(maxId);
            console.log(`‚ÜóÔ∏è Incremental start from idGreaterThan=${cursorId}`);
          }
        } catch {}
      } else {
        console.log(`üîÑ Full sync mode: loading all products from the beginning`);
      }

      let buffer = [];
      const flush = async () => {
        if (buffer.length === 0) return;
        const cols = ['id','article','name','brand','category_id','category','purchase_price','available_quantity','image_url','description'];
        const values = [];
        const params = [];
        let p = 1;
        for (const it of buffer) {
          values.push(`($${p++},$${p++},$${p++},$${p++},$${p++},$${p++},$${p++},$${p++},$${p++},$${p++})`);
          params.push(it.id, it.article, it.name, it.brand, it.category_id, it.category, it.purchase_price, it.available_quantity, it.image_url, it.description);
        }
        const sql = `INSERT INTO sima_land_catalog (${cols.join(',')}) VALUES ${values.join(',')}
          ON CONFLICT (id) DO UPDATE SET
            article=EXCLUDED.article,
            name=EXCLUDED.name,
            brand=EXCLUDED.brand,
            category_id=EXCLUDED.category_id,
            category=EXCLUDED.category,
            purchase_price=EXCLUDED.purchase_price,
            available_quantity=EXCLUDED.available_quantity,
            image_url=EXCLUDED.image_url,
            description=EXCLUDED.description,
            updated_at=NOW()`;
        await client.query(sql, params);
        savedCount += buffer.length;
        buffer = [];
      };

      while (true) {
        batchIndex++;
        let result;
        try {
          result = await this.fetchProducts(token, 1, perPage, cursorId, options);
        } catch (e) {
          const status = e?.response?.status;
          if (status === 404) {
            console.warn('Sima-land: items not found (404). Treating as end of stream.');
            break;
          }
          console.warn(`Sima-land transient error on batch #${batchIndex}: ${e.message || e}`);
          // –±—ç–∫-–æ—Ñ—Ñ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏–º —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
          await new Promise(r => setTimeout(r, 3000));
          batchIndex--; // –ø–æ–≤—Ç–æ—Ä–∏–º –ø–æ–ø—ã—Ç–∫—É —Å —Ç–µ–º –∂–µ –Ω–æ–º–µ—Ä–æ–º
          continue;
        }
        const items = result.items || [];
        if (items.length === 0) break;

        for (const product of items) {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π —Ç–æ–≤–∞—Ä–∞
          const parsedProduct = this.parseProduct(product);
          
          if (!parsedProduct || !parsedProduct.article) {
            console.warn(`Skipping product with missing article in catalog:`, product.id || product.sid);
            continue;
          }

          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥
          const row = {
            id: parsedProduct.id,
            article: parsedProduct.article,
            name: parsedProduct.name,
            brand: parsedProduct.brand,
            category_id: parsedProduct.category_id,
            category: parsedProduct.category,
            purchase_price: parsedProduct.purchase_price,
            available_quantity: parsedProduct.available_quantity,
            image_url: parsedProduct.image_url,
            description: parsedProduct.description
          };
          
          buffer.push(row);
          if (buffer.length >= 500) {
            await flush();
            if (progressStore && progressJobId) {
              progressStore.setProgress(progressJobId, Math.min(100, Math.floor(Math.log10(1 + savedCount) * 25)), {
                stage: 'catalog-saving',
                savedItems: savedCount
              });
            }
          }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä –ø–æ—Å–ª–µ–¥–Ω–∏–º id –∏–∑ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        if (items.length > 0) {
          const lastParsed = this.parseProduct(items[items.length - 1]);
          if (lastParsed && lastParsed.id) {
            cursorId = lastParsed.id;
          } else {
            // Fallback –Ω–∞ –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            const last = items[items.length - 1];
            cursorId = last?.id || last?.sid || cursorId;
          }
        }

        console.log(`üì¶ Catalog batch #${batchIndex}: fetched=${items.length}, totalSaved=${savedCount + buffer.length}, cursor=${cursorId}`);
      }

      // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞
      await flush();

      // Categories refresh (best effort)
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API v3
      const cats = await this.fetchCategories(token, { perPage: 1000 });
      console.log(`üìö Categories fetched: ${cats.length}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ë–î
      for (const c of cats) {
        try {
          await client.query(
            `INSERT INTO sima_land_categories (id, name, parent_id, level)
             VALUES ($1,$2,$3,$4)
             ON CONFLICT (id) DO UPDATE SET name=EXCLUDED.name, parent_id=EXCLUDED.parent_id, level=EXCLUDED.level, updated_at=NOW()`,
            [c.id, c.name, c.parent_id || null, c.depth || null]
          );
        } catch (err) {
          // –¢–∏—Ö–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
          console.warn(`Failed to save category ${c.id}:`, err.message);
        }
      }

      // –†–µ–∑–µ—Ä–≤–Ω–æ–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞, –µ—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª–æ 0
      if (!cats || cats.length === 0) {
        console.log('‚ÑπÔ∏è Categories API returned 0. Backfilling categories from catalog...');
        await client.query(
          `INSERT INTO sima_land_categories (id, name)
           SELECT DISTINCT category_id, COALESCE(category, '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
           FROM sima_land_catalog
           WHERE category_id IS NOT NULL
           ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name, updated_at = NOW()`
        );
      }

      console.log(`‚úÖ Catalog load completed: saved=${savedCount}`);
      if (progressStore && progressJobId) progressStore.finishJob(progressJobId, { saved: savedCount });
      return { saved: savedCount };
    } finally {
      client.release();
    }
  }
}

module.exports = SimaLandService;

