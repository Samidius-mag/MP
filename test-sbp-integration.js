#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –°–ë–ü –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 * –ó–∞–ø—É—Å–∫: node test-sbp-integration.js
 */

const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  serverUrl: process.env.SERVER_URL || 'http://localhost:5000',
  clientUrl: process.env.CLIENT_URL || 'http://localhost:3000',
  testAmount: 1000, // 10 ‚ÇΩ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
  testEmail: 'test@example.com',
  testPassword: 'testpassword123'
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function testSbpIntegration() {
  log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –°–ë–ü –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', 'bold');
  log('================================', 'blue');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...', 'yellow');
    try {
      const healthResponse = await axios.get(`${config.serverUrl}/api/health`);
      log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω', 'green');
    } catch (error) {
      log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'red');
      log(`–û—à–∏–±–∫–∞: ${error.message}`, 'red');
      return;
    }

    // 2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    log('\n2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...', 'yellow');
    let authToken;
    try {
      const registerData = {
        email: config.testEmail,
        password: config.testPassword,
        firstName: 'Test',
        lastName: 'User',
        phone: '+79001234567',
        inn: '1234567890',
        companyData: {
          companyName: 'Test Company',
          inn: '1234567890',
          address: 'Test Address'
        },
        termsAccepted: 'true'
      };
      
      log(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(registerData, null, 2)}`, 'blue');
      
      const registerResponse = await axios.post(`${config.serverUrl}/api/auth/register`, registerData);
      
      authToken = registerResponse.data.token;
      log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', 'green');
    } catch (error) {
      log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'red');
      if (error.response?.data) {
        log(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(error.response.data, null, 2)}`, 'red');
      } else {
        log(`–û—à–∏–±–∫–∞: ${error.message}`, 'red');
      }
      
      if (error.response?.status === 409) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏
        log('\n‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥...', 'yellow');
        try {
          const loginResponse = await axios.post(`${config.serverUrl}/api/auth/login`, {
            email: config.testEmail,
            password: config.testPassword
          });
          authToken = loginResponse.data.token;
          log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', 'green');
        } catch (loginError) {
          log('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞', 'red');
          if (loginError.response?.data) {
            log(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –≤—Ö–æ–¥–∞: ${JSON.stringify(loginError.response.data, null, 2)}`, 'red');
          } else {
            log(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${loginError.message}`, 'red');
          }
          return;
        }
      } else {
        log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ 400:', 'yellow');
        log('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π (first_name –≤–º–µ—Å—Ç–æ firstName)', 'yellow');
        log('   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è', 'yellow');
        log('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email', 'yellow');
        log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ', 'yellow');
        return;
      }
    }

    // 3. –°–æ–∑–¥–∞–Ω–∏–µ –°–ë–ü –ø–ª–∞—Ç–µ–∂–∞
    log('\n3. –°–æ–∑–¥–∞–Ω–∏–µ –°–ë–ü –ø–ª–∞—Ç–µ–∂–∞...', 'yellow');
    try {
      const paymentResponse = await axios.post(`${config.serverUrl}/api/payment/deposit`, {
        amount: config.testAmount / 100, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏
        payment_method: 'sbp'
      }, {
        headers: {
          'Authorization': `Bearer ${authToken}`,
          'Content-Type': 'application/json'
        }
      });

      const { paymentUrl, paymentId, depositId } = paymentResponse.data;
      
      if (paymentUrl && paymentUrl.type === 'sbp') {
        log('‚úÖ –°–ë–ü –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω', 'green');
        log(`   ID –∑–∞–∫–∞–∑–∞: ${paymentUrl.orderId}`, 'blue');
        log(`   –°—É–º–º–∞: ${paymentUrl.amount} ‚ÇΩ`, 'blue');
        
        if (paymentUrl.qrCode) {
          log('   QR-–∫–æ–¥: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω', 'blue');
        }
        
        if (paymentUrl.paymentUrl) {
          log(`   URL –æ–ø–ª–∞—Ç—ã: ${paymentUrl.paymentUrl}`, 'blue');
        }

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        log('\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞...', 'yellow');
        try {
          const statusResponse = await axios.get(`${config.serverUrl}/api/payment/sbp-status/${paymentUrl.orderId}`, {
            headers: {
              'Authorization': `Bearer ${authToken}`
            }
          });

          const { status, localStatus, balance } = statusResponse.data;
          log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω', 'green');
          log(`   –°—Ç–∞—Ç—É—Å –í–¢–ë: ${status}`, 'blue');
          log(`   –õ–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${localStatus}`, 'blue');
          log(`   –ë–∞–ª–∞–Ω—Å: ${balance} ‚ÇΩ`, 'blue');
        } catch (statusError) {
          log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞', 'yellow');
          log(`–û—à–∏–±–∫–∞: ${statusError.response?.data?.error || statusError.message}`, 'yellow');
        }

        // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        log('\n5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤...', 'yellow');
        try {
          const depositsResponse = await axios.get(`${config.serverUrl}/api/payment/deposits`, {
            headers: {
              'Authorization': `Bearer ${authToken}`
            }
          });

          const deposits = depositsResponse.data.deposits;
          log('‚úÖ –°–ø–∏—Å–æ–∫ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω', 'green');
          log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤: ${deposits.length}`, 'blue');
          
          if (deposits.length > 0) {
            const latestDeposit = deposits[0];
            log(`   –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–ø–æ–∑–∏—Ç:`, 'blue');
            log(`     ID: ${latestDeposit.id}`, 'blue');
            log(`     –°—É–º–º–∞: ${latestDeposit.amount} ‚ÇΩ`, 'blue');
            log(`     –°—Ç–∞—Ç—É—Å: ${latestDeposit.status}`, 'blue');
            log(`     –ú–µ—Ç–æ–¥: ${latestDeposit.payment_method}`, 'blue');
          }
        } catch (depositsError) {
          log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–æ–≤', 'yellow');
          log(`–û—à–∏–±–∫–∞: ${depositsError.response?.data?.error || depositsError.message}`, 'yellow');
        }

      } else {
        log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –°–ë–ü –ø–ª–∞—Ç–µ–∂–∞', 'red');
        log(`–û—Ç–≤–µ—Ç: ${JSON.stringify(paymentResponse.data, null, 2)}`, 'red');
      }
    } catch (error) {
      log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞', 'red');
      log(`–û—à–∏–±–∫–∞: ${error.response?.data?.error || error.message}`, 'red');
      
      if (error.response?.data?.error?.includes('VTB')) {
        log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:', 'yellow');
        log('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –í–¢–ë API', 'yellow');
        log('   - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è', 'yellow');
        log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é', 'yellow');
      }
    }

    // 6. –¢–µ—Å—Ç webhook (—Å–∏–º—É–ª—è—Ü–∏—è)
    log('\n6. –¢–µ—Å—Ç webhook (—Å–∏–º—É–ª—è—Ü–∏—è)...', 'yellow');
    try {
      const webhookData = {
        orderId: 'test-order-' + Date.now(),
        status: '1',
        amount: config.testAmount,
        operation: 'deposited'
      };

      const webhookResponse = await axios.post(`${config.serverUrl}/api/payment/sbp-webhook`, webhookData, {
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (webhookResponse.data.status === 'ok') {
        log('‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω', 'green');
      } else {
        log('‚ö†Ô∏è  Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º', 'yellow');
      }
    } catch (webhookError) {
      log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ webhook', 'yellow');
      log(`–û—à–∏–±–∫–∞: ${webhookError.response?.data?.error || webhookError.message}`, 'yellow');
    }

    log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', 'bold');
    log('================================', 'blue');
    
    log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:', 'yellow');
    log('1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env', 'blue');
    log('2. –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –í–¢–ë', 'blue');
    log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏', 'blue');
    log('4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook URL –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –í–¢–ë', 'blue');

  } catch (error) {
    log('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', 'red');
    log(`–û—à–∏–±–∫–∞: ${error.message}`, 'red');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  testSbpIntegration().catch(console.error);
}

module.exports = { testSbpIntegration };
