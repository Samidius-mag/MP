const { Pool } = require('pg');
require('dotenv').config();

async function cleanOrders() {
  const pool = new Pool({
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 5432,
    database: process.env.DB_NAME || 'dropshipping_db',
    user: process.env.DB_USER || 'dropshipping',
    password: process.env.DB_PASSWORD || 'KeyOfWorld2025',
  });

  const client = await pool.connect();
  try {
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∑–∞–∫–∞–∑–æ–≤...');
    
    // 1. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π)
    console.log('1. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∑–∞–∫–∞–∑–æ–≤...');
    const duplicateResult = await client.query(`
      WITH duplicates AS (
        SELECT id,
               ROW_NUMBER() OVER (
                 PARTITION BY client_id, marketplace_order_id, marketplace
                 ORDER BY created_at DESC
               ) AS rn
        FROM orders
      )
      DELETE FROM orders
      WHERE id IN (SELECT id FROM duplicates WHERE rn > 1)
    `);
    console.log(`   –£–¥–∞–ª–µ–Ω–æ ${duplicateResult.rowCount} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`);

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
    console.log('2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤...');
    
    // –ó–∞–∫–∞–∑—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π —Å—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏
    const oldOrdersResult = await client.query(`
      UPDATE orders 
      SET status = 'delivered' 
      WHERE created_at < NOW() - INTERVAL '7 days' 
      AND status = 'new'
    `);
    console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ ${oldOrdersResult.rowCount} —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—Ç–∞—Ç—É—Å 'delivered'`);

    // –ó–∞–∫–∞–∑—ã —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π —Å—á–∏—Ç–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏
    const shippedOrdersResult = await client.query(`
      UPDATE orders 
      SET status = 'shipped' 
      WHERE created_at < NOW() - INTERVAL '3 days' 
      AND created_at >= NOW() - INTERVAL '7 days'
      AND status = 'new'
    `);
    console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ ${shippedOrdersResult.rowCount} –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å—Ç–∞—Ç—É—Å 'shipped'`);

    // 3. –û–±–Ω–æ–≤–ª—è–µ–º order_type –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤
    console.log('3. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø—ã –∑–∞–∫–∞–∑–æ–≤...');
    const orderTypeResult = await client.query(`
      UPDATE orders 
      SET order_type = 'FBS' 
      WHERE order_type IS NULL OR order_type = ''
    `);
    console.log(`   –û–±–Ω–æ–≤–ª–µ–Ω–æ ${orderTypeResult.rowCount} –∑–∞–∫–∞–∑–æ–≤ —Å —Ç–∏–ø–æ–º 'FBS'`);

    // 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('4. –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤:');
    const statsResult = await client.query(`
      SELECT 
        status,
        order_type,
        COUNT(*) as count,
        MIN(created_at) as oldest,
        MAX(created_at) as newest
      FROM orders 
      GROUP BY status, order_type
      ORDER BY status, order_type
    `);

    console.log('   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –∏ —Ç–∏–ø–∞–º:');
    statsResult.rows.forEach(row => {
      console.log(`   - ${row.status} (${row.order_type}): ${row.count} –∑–∞–∫–∞–∑–æ–≤`);
      console.log(`     –ü–µ—Ä–∏–æ–¥: ${new Date(row.oldest).toLocaleDateString('ru-RU')} - ${new Date(row.newest).toLocaleDateString('ru-RU')}`);
    });

    console.log('‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–∫–∞–∑–æ–≤:', err.message);
  } finally {
    client.release();
    await pool.end();
  }
}

cleanOrders();












