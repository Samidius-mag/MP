const axios = require('axios');

async function checkServerStatus() {
  const baseUrl = process.env.SERVER_URL || 'http://localhost:3001';
  
  console.log('üîç Checking server status...');
  console.log(`Server URL: ${baseUrl}`);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º health check
    console.log('\n1. Checking health endpoint...');
    const healthResponse = await axios.get(`${baseUrl}/api/health`);
    console.log('‚úÖ Health check:', healthResponse.data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º auth endpoint
    console.log('\n2. Checking auth endpoint...');
    try {
      const authResponse = await axios.get(`${baseUrl}/api/auth/status`);
      console.log('‚úÖ Auth endpoint:', authResponse.data);
    } catch (error) {
      console.log('‚ö†Ô∏è  Auth endpoint error:', error.response?.status, error.response?.data?.error || error.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º admin endpoint (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    console.log('\n3. Checking admin endpoint (without auth)...');
    try {
      const adminResponse = await axios.get(`${baseUrl}/api/admin/users`);
      console.log('‚úÖ Admin endpoint accessible:', adminResponse.data);
    } catch (error) {
      console.log('‚ö†Ô∏è  Admin endpoint error (expected without auth):', error.response?.status, error.response?.data?.error || error.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º client endpoint (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    console.log('\n4. Checking client endpoint (without auth)...');
    try {
      const clientResponse = await axios.get(`${baseUrl}/api/client/orders`);
      console.log('‚úÖ Client endpoint accessible:', clientResponse.data);
    } catch (error) {
      console.log('‚ö†Ô∏è  Client endpoint error (expected without auth):', error.response?.status, error.response?.data?.error || error.message);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º pricing endpoint (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω)
    console.log('\n5. Checking pricing endpoint (should be disabled)...');
    try {
      const pricingResponse = await axios.get(`${baseUrl}/api/pricing/settings`);
      console.log('‚ö†Ô∏è  Pricing endpoint accessible (unexpected):', pricingResponse.data);
    } catch (error) {
      if (error.code === 'ECONNREFUSED' || error.response?.status === 404) {
        console.log('‚úÖ Pricing endpoint properly disabled');
      } else {
        console.log('‚ö†Ô∏è  Pricing endpoint error:', error.response?.status, error.response?.data?.error || error.message);
      }
    }
    
    console.log('\n‚úÖ Server status check completed!');
    
  } catch (error) {
    console.error('‚ùå Server check failed:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('üí° Server is not running. Please start the server first.');
    } else if (error.code === 'ENOTFOUND') {
      console.log('üí° Server URL is incorrect or server is not accessible.');
    }
  }
}

checkServerStatus();




