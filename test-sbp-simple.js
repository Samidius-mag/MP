#!/usr/bin/env node

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –°–ë–ü –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 * –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏, –ø–æ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç
 */

const axios = require('axios');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  serverUrl: process.env.SERVER_URL || 'http://localhost:5000',
  testEmail: 'test@example.com',
  testPassword: 'TestPassword123!',
  testAmount: 1000 // 10 ‚ÇΩ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function testSbpSimple() {
  log('\nüß™ –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –°–ë–ü', 'bold');
  log('================================', 'blue');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    log('\n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...', 'yellow');
    try {
      await axios.get(`${config.serverUrl}/api/health`);
      log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω', 'green');
    } catch (error) {
      log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'red');
      return;
    }

    // 2. –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
    log('\n2. –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞...', 'yellow');
    let authToken;
    
    try {
      const loginResponse = await axios.post(`${config.serverUrl}/api/auth/login`, {
        email: config.testEmail,
        password: config.testPassword
      });
      authToken = loginResponse.data.token;
      log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω', 'green');
    } catch (loginError) {
      log('‚ö†Ô∏è  –í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –ø—Ä–æ–±—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...', 'yellow');
      
      // 3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
      log('\n3. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...', 'yellow');
      try {
        const registerData = {
          email: config.testEmail,
          password: config.testPassword,
          firstName: 'Test',
          lastName: 'User',
          phone: '+79001234567',
          inn: '1234567890',
          companyData: {
            companyName: 'Test Company',
            inn: '1234567890',
            address: 'Test Address'
          },
          termsAccepted: 'true'
        };

        const registerResponse = await axios.post(`${config.serverUrl}/api/auth/register`, registerData);
        authToken = registerResponse.data.token;
        log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', 'green');
      } catch (registerError) {
        log('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', 'red');
        if (registerError.response?.data) {
          log(`–î–µ—Ç–∞–ª–∏: ${JSON.stringify(registerError.response.data, null, 2)}`, 'red');
        }
        return;
      }
    }

    // 4. –¢–µ—Å—Ç –°–ë–ü –ø–ª–∞—Ç–µ–∂–∞
    log('\n4. –¢–µ—Å—Ç –°–ë–ü –ø–ª–∞—Ç–µ–∂–∞...', 'yellow');
    try {
      const paymentResponse = await axios.post(`${config.serverUrl}/api/payment/deposit`, {
        amount: config.testAmount / 100, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ä—É–±–ª–∏
        payment_method: 'sbp'
      }, {
        headers: {
          'Authorization': `Bearer ${authToken}`,
          'Content-Type': 'application/json'
        }
      });

      const { paymentUrl, paymentId, depositId } = paymentResponse.data;
      
      if (paymentUrl && paymentUrl.type === 'sbp') {
        log('‚úÖ –°–ë–ü –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω', 'green');
        log(`   ID –∑–∞–∫–∞–∑–∞: ${paymentUrl.orderId}`, 'blue');
        log(`   –°—É–º–º–∞: ${paymentUrl.amount} ‚ÇΩ`, 'blue');
        
        if (paymentUrl.qrCode) {
          log('   QR-–∫–æ–¥: —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω', 'blue');
        }
        
        if (paymentUrl.paymentUrl) {
          log(`   URL –æ–ø–ª–∞—Ç—ã: ${paymentUrl.paymentUrl}`, 'blue');
        }

        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        log('\n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...', 'yellow');
        try {
          const statusResponse = await axios.get(`${config.serverUrl}/api/payment/sbp-status/${paymentUrl.orderId}`, {
            headers: {
              'Authorization': `Bearer ${authToken}`
            }
          });

          const { status, localStatus, balance } = statusResponse.data;
          log('‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω', 'green');
          log(`   –°—Ç–∞—Ç—É—Å –í–¢–ë: ${status}`, 'blue');
          log(`   –õ–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${localStatus}`, 'blue');
          log(`   –ë–∞–ª–∞–Ω—Å: ${balance} ‚ÇΩ`, 'blue');
        } catch (statusError) {
          log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞', 'yellow');
          log(`–û—à–∏–±–∫–∞: ${statusError.response?.data?.error || statusError.message}`, 'yellow');
        }

      } else {
        log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –°–ë–ü –ø–ª–∞—Ç–µ–∂–∞', 'red');
        log(`–û—Ç–≤–µ—Ç: ${JSON.stringify(paymentResponse.data, null, 2)}`, 'red');
      }
    } catch (error) {
      log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞', 'red');
      log(`–û—à–∏–±–∫–∞: ${error.response?.data?.error || error.message}`, 'red');
      
      if (error.response?.data?.error?.includes('VTB')) {
        log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:', 'yellow');
        log('   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –í–¢–ë API', 'yellow');
        log('   - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è', 'yellow');
        log('   - –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é', 'yellow');
      }
    }

    log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!', 'bold');

  } catch (error) {
    log('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞', 'red');
    log(`–û—à–∏–±–∫–∞: ${error.message}`, 'red');
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  testSbpSimple().catch(console.error);
}

module.exports = { testSbpSimple };


